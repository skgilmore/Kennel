[{"C:\\Users\\Stephanie\\workspace\\kennels\\src\\index.js":"1","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Kennel.js":"2","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\ApplicationViews.js":"3","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\nav\\NavBar.js":"4","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Home.js":"5","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\animal\\AnimalForm.js":"6","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\animal\\AnimalList.js":"7","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\animal\\AnimalProvider.js":"8","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\customer\\CustomerProvider.js":"9","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\customer\\CustomerList.js":"10","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Employee\\EmployeeProvider.js":"11","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Employee\\EmployeeList.js":"12","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Locations\\LocationsProvider.js":"13","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Locations\\LocationsList.js":"14","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\PropsAndState.js":"15","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\animal\\AnimalCard.js":"16","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Employee\\EmployeeCard.js":"17","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Locations\\LocationCard.js":"18","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\customer\\CustomerCard.js":"19","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Employee\\EmployeeForm.js":"20","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Locations\\LocationForm.js":"21"},{"size":361,"mtime":1611606677422,"results":"22","hashOfConfig":"23"},{"size":245,"mtime":1611606677411,"results":"24","hashOfConfig":"23"},{"size":2468,"mtime":1611678762271,"results":"25","hashOfConfig":"23"},{"size":910,"mtime":1611606677421,"results":"26","hashOfConfig":"23"},{"size":415,"mtime":1611606677410,"results":"27","hashOfConfig":"23"},{"size":5081,"mtime":1611613612252,"results":"28","hashOfConfig":"23"},{"size":3026,"mtime":1611610636552,"results":"29","hashOfConfig":"23"},{"size":1216,"mtime":1611606677418,"results":"30","hashOfConfig":"23"},{"size":1224,"mtime":1611606677420,"results":"31","hashOfConfig":"23"},{"size":823,"mtime":1611611879204,"results":"32","hashOfConfig":"23"},{"size":1168,"mtime":1611606677408,"results":"33","hashOfConfig":"23"},{"size":1035,"mtime":1611611888692,"results":"34","hashOfConfig":"23"},{"size":1152,"mtime":1611606677414,"results":"35","hashOfConfig":"23"},{"size":1033,"mtime":1611679812608,"results":"36","hashOfConfig":"23"},{"size":512,"mtime":1611606677415,"results":"37","hashOfConfig":"23"},{"size":448,"mtime":1611679726840,"results":"38","hashOfConfig":"23"},{"size":309,"mtime":1611614500581,"results":"39","hashOfConfig":"23"},{"size":292,"mtime":1611606677413,"results":"40","hashOfConfig":"23"},{"size":292,"mtime":1611606677419,"results":"41","hashOfConfig":"23"},{"size":3902,"mtime":1611615124239,"results":"42","hashOfConfig":"23"},{"size":4424,"mtime":1611679893787,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1x980ki",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"57"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"57"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"57"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"57"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Stephanie\\workspace\\kennels\\src\\index.js",[],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Kennel.js",[],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\ApplicationViews.js",["92"],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\nav\\NavBar.js",[],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Home.js",[],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\animal\\AnimalForm.js",["93"],"import React, { useContext, useEffect, useState } from \"react\"\r\nimport { LocationContext } from \"../Locations/LocationsProvider\"\r\nimport { AnimalContext } from \"../animal/AnimalProvider\"\r\nimport { CustomerContext } from \"../customer/CustomerProvider\"\r\nimport \"./Animal.css\"\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport const AnimalForm = () => {\r\n    const { addAnimal } = useContext(AnimalContext)\r\n    const { locations, getLocations } = useContext(LocationContext)\r\n    const { customers, getCustomers } = useContext(CustomerContext)\r\n    // console.log(\"whatsLocations\", locations)\r\n    /*\r\n    With React, we do not target the DOM with `document.querySelector()`. Instead, our return (render) reacts to state or props.\r\n\r\n    Define the intial state of the form inputs with useState()\r\n    */\r\n\r\n    const [animal, setAnimal] = useState({\r\n      name: \"\",\r\n      breed: \"\",\r\n      locationId: 0,\r\n      customerId: 0\r\n    });\r\n\r\n    const history = useHistory();\r\n\r\n    /*\r\n    Reach out to the world and get customers state\r\n    and locations state on initialization, so we can provide their data in the form dropdowns\r\n    */\r\n    useEffect(() => {\r\n     \r\n      getCustomers().then(getLocations)\r\n    }, [])\r\n\r\n    //when a field changes, update state. The return will re-render and display based on the values in state\r\n        // NOTE! What's happening in this function can be very difficult to grasp. Read it over many times and ask a lot questions about it.\r\n    //Controlled component\r\n    const handleControlledInputChange = (event) => {\r\n      /* When changing a state object or array,\r\n      always create a copy, make changes, and then set state.*/\r\n      const newAnimal = { ...animal }\r\n      let selectedVal = event.target.value\r\n      // forms always provide values as strings. But we want to save the ids as numbers. This will cover both customer and location ids\r\n      if (event.target.id.includes(\"Id\")) {\r\n        selectedVal = parseInt(selectedVal)\r\n      }\r\n      /* Animal is an object with properties.\r\n      Set the property to the new value\r\n      using object bracket notation. */\r\n      newAnimal[event.target.id] = selectedVal\r\n      // update state\r\n      setAnimal(newAnimal)\r\n    }\r\n\r\n    const handleClickSaveAnimal = (event) => {\r\n      event.preventDefault() //Prevents the browser from submitting the form\r\n\r\n      const locationId = animal.locationId\r\n      const customerId = animal.customerId\r\n\r\n      if (locationId === 0 || customerId === 0) {\r\n        window.alert(\"Please select a location and a customer\")\r\n      } else {\r\n        //invoke addAnimal passing animal as an argument.\r\n        //once complete, change the url and display the animal list\r\n        addAnimal(animal)\r\n        .then(() => history.push(\"/animals\"))\r\n      }\r\n    }\r\n\r\n    return (\r\n      <form className=\"animalForm\">\r\n          <h2 className=\"animalForm__title\">New Animal</h2>\r\n          <fieldset>\r\n              <div className=\"form-group\">\r\n                  <label htmlFor=\"name\">Animal name:</label>\r\n                  <input type=\"text\" id=\"name\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Animal name\" value={animal.name}/>\r\n              </div>\r\n          </fieldset>\r\n          <fieldset>\r\n              <div className=\"form-group\">\r\n                  <label htmlFor=\"breed\">Animal breed:</label>\r\n                  <input type=\"text\" id=\"breed\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Animal breed\" value={animal.breed}/>\r\n              </div>\r\n          </fieldset>\r\n          <fieldset>\r\n              <div className=\"form-group\">\r\n                  <label htmlFor=\"location\">Assign to location: </label>\r\n                  <select defaultValue={animal.locationId} name=\"locationId\" id=\"locationId\" onChange={handleControlledInputChange} className=\"form-control\" >\r\n                      <option value=\"0\">Select a location</option>\r\n                      {locations.map(l => (\r\n                          <option key={l.id} value={l.id}>\r\n                              {l.name}\r\n                          </option>\r\n                      ))}\r\n                  </select>\r\n              </div>\r\n          </fieldset>\r\n          <fieldset>\r\n              <div className=\"form-group\">\r\n                  <label htmlFor=\"customerId\">Customer: </label>\r\n                  <select defaultValue={animal.customerId} name=\"customer\" id=\"customerId\" onChange={handleControlledInputChange} className=\"form-control\" >\r\n                      <option value=\"0\">Select a customer</option>\r\n                      {customers.map(c => (\r\n                          <option key={c.id} value={c.id}>\r\n                              {c.name}\r\n                          </option>\r\n                      ))}\r\n                  </select>\r\n              </div>\r\n          </fieldset>\r\n          <button className=\"btn btn-primary\"\r\n            onClick={handleClickSaveAnimal}>\r\n            Save Animal\r\n          </button>\r\n      </form>\r\n    )\r\n}",["94","95"],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\animal\\AnimalList.js",["96","97","98"],"import React, { useContext, useEffect, useState } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { AnimalContext } from \"./AnimalProvider\"\r\nimport { AnimalCard } from \"./AnimalCard\"\r\nimport \"./Animal.css\"\r\nimport { CustomerContext } from \"../customer/CustomerProvider\"\r\nimport { LocationContext } from \"../Locations/LocationsProvider\"\r\n\r\n// useContext and useEffect are HOOKS\r\n// useContext lets you use data structures and functions that\r\n//  a parent provider component exposes. you must import the context obj\r\n// AnimalContext, so you can access the obj it exposes\r\n// The useEffect hook allows the component to reach out into the\r\n//  world for anything that cannot\r\n//  be handled during render. In this case, it is the API call for the animals.\r\n\r\n\r\n\r\nexport const AnimalList = () => {\r\n\r\n    // This state changes when `getAnimals()` is invoked below\r\n    // Be careful setting state within the useEffect. State changes cause \r\n    // a re-render. Re-render can invoke useEffect (depending on the dependency \r\n    //     array values). This would result in an infinate loop. \r\n    // Also other areas need this state change info!\r\n\r\n    const { animals, getAnimals } = useContext(AnimalContext)\r\n    const { locations, getLocations } = useContext(LocationContext)\r\n    const { customers, getCustomers } = useContext(CustomerContext)\r\n   \r\n    const history = useHistory()\r\n\r\n    //useEffect - reach out to the world for something\r\n    useEffect(() => {\r\n        console.log(\"AnimalList: Initial render before data\")\r\n        getLocations()\r\n            .then(getCustomers)\r\n            .then(getAnimals)\r\n    }, [])\r\n\r\n    return (\r\n            <div>\r\n\r\n             <button onClick={() => { history.push(\"/animals/create\") }}>\r\n                Add Animal\r\n              </button>\r\n\r\n        <div className=\"animals\">\r\n            {/* <h2>Animals</h2> */}\r\n            {\r\n                animals.map(animal => {\r\n                    const owner = customers.find(c => c.id === animal.customerId)\r\n                    return <AnimalCard key={animal.id} animal={animal} owner={owner} />\r\n                })\r\n            }\r\n        </div>\r\n        </div>\r\n    )\r\n    //  <Animal key={animal.id} animal={animal} />)}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // useEffect is kinda like asycronaus java bc its a callback function\r\n    // its  function holds a value that is a function\r\n    // similar to .then in weather in holiday world\r\n\r\n\r\n\r\n\r\n// line 16: you are returning an array of objects so that you can use the .map function\r\n// that is a method used on an array.\r\n\r\n// The dependency array. Logic within functions only occur when a function is invoked. Within \r\n// a React component, useEffect is a function. After the return, useEffect is \r\n// automatically invoked and since the dependency array is empty, it only runs the\r\n//  first time the component renders.\r\n\r\n\r\n// Use the .map() array method to iterate the array of animals and\r\n//  generate HTML for each one by invoking the AnimalCard component function.","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\animal\\AnimalProvider.js",[],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\customer\\CustomerProvider.js",[],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\customer\\CustomerList.js",["99"],"import React, { useContext, useEffect } from \"react\"\r\nimport { CustomerContext } from \"./CustomerProvider\"\r\nimport { CustomerCard } from \"./CustomerCard\"\r\nimport \"./Customer.css\"\r\n\r\n\r\n\r\nexport const CustomerList = () => {\r\n\r\n    const { customers, getCustomers } = useContext(CustomerContext)\r\n\r\n    //useEffect - reach out to the world for something\r\n    useEffect(() => {\r\n        console.log(\"CustomerList: useEffect - getCustomers\")\r\n        getCustomers()\r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n         <div className=\"customers\">\r\n\r\n       \r\n            {console.log(\"CustomerList: Render\", customers)}\r\n            {\r\n                customers.map(customer => {\r\n                    return <CustomerCard key={customer.id} customer={customer} />\r\n                })\r\n            }\r\n        </div>\r\n        \r\n\r\n    )\r\n}\r\n\r\n","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Employee\\EmployeeProvider.js",[],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Employee\\EmployeeList.js",["100"],"import React, { useContext, useEffect } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { EmployeeContext } from \"./EmployeeProvider\"\r\nimport { EmployeeCard } from \"./EmployeeCard\"\r\nimport \"./Employee.css\"\r\n\r\n\r\n\r\nexport const EmployeeList = () => {\r\n\r\n    const { employees, getEmployees } = useContext(EmployeeContext)\r\n\r\n    //useEffect - reach out to the world for something\r\n    useEffect(() => {\r\n        console.log(\"EmployeeList: useEffect getEmployees\")\r\n        getEmployees()\r\n\r\n    }, [])\r\n  \r\n\r\n    const history = useHistory()\r\n    return (\r\n        <div className=\"employees\">\r\n            <div>\r\n        <button onClick={() => { history.push(\"/employees/create\") }}>\r\n        New Employee\r\n      </button>\r\n     \r\n            {console.log(\"EmployeeList: Render\", employees)}\r\n            {\r\n                employees.map(employee => {\r\n                    return <EmployeeCard key={employee.id} employee={employee} />\r\n                })\r\n            }\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Locations\\LocationsProvider.js",[],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Locations\\LocationsList.js",["101"],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\PropsAndState.js",[],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\animal\\AnimalCard.js",[],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Employee\\EmployeeCard.js",[],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Locations\\LocationCard.js",[],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\customer\\CustomerCard.js",[],"C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Employee\\EmployeeForm.js",["102"],"import React, { useContext, useEffect, useState } from \"react\"\r\nimport { useHistory } from 'react-router-dom';\r\nimport { LocationContext } from \"../Locations/LocationsProvider\"\r\nimport { EmployeeContext } from \"../Employee/EmployeeProvider\"\r\n// import { CustomerContext } from \"../customer/CustomerProvider\"\r\nimport \"./Employee.css\"\r\n\r\nexport const EmployeeForm = () => {\r\n    const { addEmployees } = useContext(EmployeeContext)\r\n    const { locations, getLocations } = useContext(LocationContext)\r\n    console.log(locations,\"locations gotten?\")\r\n    /*\r\n    With React, we do not target the DOM with `document.querySelector()`. Instead, our return (render) reacts to state or props.\r\n\r\n    Define the intial state of the form inputs with useState()\r\n    */\r\n\r\n    const [employee, setEmployees] = useState({\r\n      name: \"\",\r\n      locationId: 0,\r\n    });\r\n\r\n    const history = useHistory();\r\n\r\n    /*\r\n    Reach out to the world and get customers state\r\n    and locations state on initialization, so we can provide their data in the form dropdowns\r\n    */\r\n    useEffect(() => {\r\n        getLocations()\r\n        \r\n       \r\n    }, [])\r\n\r\n \r\n    //when a field changes, update state. The return will re-render and display based on the values in state\r\n        // NOTE! What's happening in this function can be very difficult to grasp. Read it over many times and ask a lot questions about it.\r\n    //Controlled component\r\n    const handleControlledInputChange = (event) => {\r\n      /* When changing a state object or array,\r\n      always create a copy, make changes, and then set state.*/\r\n      const newEmployee = { ...employee }\r\n      let selectedVal = event.target.value\r\n      // forms always provide values as strings. But we want to save the ids as numbers. This will cover both customer and location ids\r\n      if (event.target.id.includes(\"Id\")) {\r\n        selectedVal = parseInt(selectedVal)\r\n      }\r\n      /* Animal is an object with properties.\r\n      Set the property to the new value\r\n      using object bracket notation. */\r\n      newEmployee[event.target.id] = selectedVal\r\n      // update state\r\n      setEmployees(newEmployee)\r\n    }\r\n\r\n    const handleClickSaveEmployee = (event) => {\r\n      event.preventDefault() //Prevents the browser from submitting the form\r\n\r\n      const locationId = employee.locationId\r\n\r\n      if (locationId === 0) {\r\n        window.alert(\"Please select a location\")\r\n      } else {\r\n// this addEmployees function was made in EmployeeProvider\r\n        addEmployees(employee)\r\n        .then(() => history.push(\"/employees\"))\r\n      }\r\n    }\r\n\r\n    return (\r\n      <form className=\"employeeForm\">\r\n          <h2 className=\"employeeForm__title\">New Employee</h2>\r\n          <fieldset>\r\n              <div className=\"form-group\">\r\n                  <label htmlFor=\"name\">Employee name:</label>\r\n                  <input type=\"text\" id=\"name\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Employee name\" value={employee.name}/>\r\n              </div>\r\n          </fieldset>\r\n\r\n          <fieldset>\r\n              <div className=\"form-group\">\r\n                  <label htmlFor=\"location\">Assign to location: </label>\r\n                  <select defaultValue={employee.locationId} name=\"locationId\" id=\"locationId\" onChange={handleControlledInputChange} className=\"form-control\" >\r\n                      <option value=\"0\">Select a location</option>\r\n                      {locations.map(l => (\r\n                          <option key={l.id} value={l.id}>\r\n                              {l.name}\r\n                          </option>\r\n                      ))}\r\n                  </select>\r\n              </div>\r\n          </fieldset>\r\n          \r\n          <button className=\"btn btn-primary\"\r\n            onClick={handleClickSaveEmployee}>\r\n            Save Employee\r\n          </button>\r\n      </form>\r\n    )\r\n}","C:\\Users\\Stephanie\\workspace\\kennels\\src\\components\\Locations\\LocationForm.js",["103"],{"ruleId":"104","severity":1,"message":"105","line":77,"column":1,"nodeType":"106","messageId":"107","endLine":81,"endColumn":22},{"ruleId":"108","severity":1,"message":"109","line":35,"column":8,"nodeType":"110","endLine":35,"endColumn":10,"suggestions":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":1,"column":40,"nodeType":"118","messageId":"119","endLine":1,"endColumn":48},{"ruleId":"116","severity":1,"message":"120","line":28,"column":13,"nodeType":"118","messageId":"119","endLine":28,"endColumn":22},{"ruleId":"108","severity":1,"message":"121","line":39,"column":8,"nodeType":"110","endLine":39,"endColumn":10,"suggestions":"122"},{"ruleId":"108","severity":1,"message":"123","line":17,"column":8,"nodeType":"110","endLine":17,"endColumn":10,"suggestions":"124"},{"ruleId":"108","severity":1,"message":"125","line":18,"column":8,"nodeType":"110","endLine":18,"endColumn":10,"suggestions":"126"},{"ruleId":"108","severity":1,"message":"127","line":18,"column":8,"nodeType":"110","endLine":18,"endColumn":10,"suggestions":"128"},{"ruleId":"108","severity":1,"message":"127","line":33,"column":8,"nodeType":"110","endLine":33,"endColumn":10,"suggestions":"129"},{"ruleId":"108","severity":1,"message":"127","line":34,"column":8,"nodeType":"110","endLine":34,"endColumn":10,"suggestions":"130"},"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getCustomers' and 'getLocations'. Either include them or remove the dependency array.","ArrayExpression",["131"],"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'locations' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAnimals', 'getCustomers', and 'getLocations'. Either include them or remove the dependency array.",["134"],"React Hook useEffect has a missing dependency: 'getCustomers'. Either include it or remove the dependency array.",["135"],"React Hook useEffect has a missing dependency: 'getEmployees'. Either include it or remove the dependency array.",["136"],"React Hook useEffect has a missing dependency: 'getLocations'. Either include it or remove the dependency array.",["137"],["138"],["139"],{"desc":"140","fix":"141"},"no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"148","fix":"150"},{"desc":"148","fix":"151"},"Update the dependencies array to be: [getCustomers, getLocations]",{"range":"152","text":"153"},"Update the dependencies array to be: [getAnimals, getCustomers, getLocations]",{"range":"154","text":"155"},"Update the dependencies array to be: [getCustomers]",{"range":"156","text":"157"},"Update the dependencies array to be: [getEmployees]",{"range":"158","text":"159"},"Update the dependencies array to be: [getLocations]",{"range":"160","text":"161"},{"range":"162","text":"161"},{"range":"163","text":"161"},[1225,1227],"[getCustomers, getLocations]",[1641,1643],"[getAnimals, getCustomers, getLocations]",[471,473],"[getCustomers]",[516,518],"[getEmployees]",[517,519],"[getLocations]",[1134,1136],[1149,1151]]